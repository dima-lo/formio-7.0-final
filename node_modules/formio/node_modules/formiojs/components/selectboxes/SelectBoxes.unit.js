"use strict";

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.string.trim.js");

require("regenerator-runtime/runtime.js");

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _harness = _interopRequireDefault(require("../../../test/harness"));

var _SelectBoxes = _interopRequireDefault(require("./SelectBoxes"));

var _Formio = _interopRequireDefault(require("./../../Formio"));

var _fixtures = require("./fixtures");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('SelectBoxes Component', function () {
  it('Should build a SelectBoxes component', function () {
    return _harness.default.testCreate(_SelectBoxes.default, _fixtures.comp1).then(function (component) {
      _harness.default.testElements(component, 'input[type="checkbox"]', 8);
    });
  });
  describe('error messages', function () {
    it('Should have a minSelectedCount validation message', function () {
      var formJson = {
        components: [{
          type: 'selectboxes',
          key: 'options',
          values: [{
            label: 'Option 1',
            value: '1'
          }, {
            label: 'Option 2',
            value: '2'
          }, {
            label: 'Option 3',
            value: '3'
          }, {
            label: 'Option 4',
            value: '4'
          }],
          validate: {
            minSelectedCount: 2
          }
        }]
      };
      var element = document.createElement('div');
      return _Formio.default.createForm(element, formJson).then( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(form) {
          var comp;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  form.submission = {
                    data: {
                      options: {
                        1: true
                      }
                    }
                  };
                  comp = form.getComponent('options');
                  setTimeout(function () {
                    var messageContainer = comp.refs.messageContainer;

                    _powerAssert.default.equal(messageContainer.textContent.trim(), 'You must select at least 2 items.');
                  }, 300);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    });
    it('Should use the minSelectedCountMessage if provided', function () {
      var formJson = {
        components: [{
          type: 'selectboxes',
          key: 'options',
          values: [{
            label: 'Option 1',
            value: '1'
          }, {
            label: 'Option 2',
            value: '2'
          }, {
            label: 'Option 3',
            value: '3'
          }, {
            label: 'Option 4',
            value: '4'
          }],
          validate: {
            minSelectedCount: 2
          },
          minSelectedCountMessage: 'Please select at least {{minCount}} items.'
        }]
      };
      var element = document.createElement('div');
      return _Formio.default.createForm(element, formJson).then( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(form) {
          var comp;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  form.submission = {
                    data: {
                      options: {
                        1: true
                      }
                    }
                  };
                  comp = form.getComponent('options');
                  setTimeout(function () {
                    var messageContainer = comp.refs.messageContainer;

                    _powerAssert.default.equal(messageContainer.textContent.trim(), 'Please select at least 2 items.');
                  }, 300);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    });
    it('Should have a maxSelectedCount validation message', function () {
      var formJson = {
        components: [{
          type: 'selectboxes',
          key: 'options',
          values: [{
            label: 'Option 1',
            value: '1'
          }, {
            label: 'Option 2',
            value: '2'
          }, {
            label: 'Option 3',
            value: '3'
          }, {
            label: 'Option 4',
            value: '4'
          }],
          validate: {
            maxSelectedCount: 2
          }
        }]
      };
      var element = document.createElement('div');
      return _Formio.default.createForm(element, formJson).then( /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(form) {
          var comp;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  form.submission = {
                    data: {
                      options: {
                        1: true,
                        2: true,
                        3: true
                      }
                    }
                  };
                  comp = form.getComponent('options');
                  setTimeout(function () {
                    var messageContainer = comp.refs.messageContainer;

                    _powerAssert.default.equal(messageContainer.textContent.trim(), 'You can only select up to 2 items.');
                  }, 300);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x3) {
          return _ref3.apply(this, arguments);
        };
      }());
    });
    it('Should use the maxSelectedCountMessage if provided', function () {
      var formJson = {
        components: [{
          type: 'selectboxes',
          key: 'options',
          values: [{
            label: 'Option 1',
            value: '1'
          }, {
            label: 'Option 2',
            value: '2'
          }, {
            label: 'Option 3',
            value: '3'
          }, {
            label: 'Option 4',
            value: '4'
          }],
          validate: {
            maxSelectedCount: 2
          },
          maxSelectedCountMessage: 'Please select {{maxCount}} items at most.'
        }]
      };
      var element = document.createElement('div');
      return _Formio.default.createForm(element, formJson).then( /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(form) {
          var comp;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  form.submission = {
                    data: {
                      options: {
                        1: true,
                        2: true,
                        3: true
                      }
                    }
                  };
                  comp = form.getComponent('options');
                  setTimeout(function () {
                    var messageContainer = comp.refs.messageContainer;

                    _powerAssert.default.equal(messageContainer.textContent.trim(), 'Please select 2 items at most.');
                  }, 300);

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        return function (_x4) {
          return _ref4.apply(this, arguments);
        };
      }());
    });
  });
});